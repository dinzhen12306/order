// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderclient

import (
	"context"

	"order/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateOrderProductReq    = order.CreateOrderProductReq
	CreateOrderProductResp   = order.CreateOrderProductResp
	CreateOrderReq           = order.CreateOrderReq
	CreateOrderResp          = order.CreateOrderResp
	GetOrderReq              = order.GetOrderReq
	GetOrderResp             = order.GetOrderResp
	GetOrdersReq             = order.GetOrdersReq
	GetOrdersResp            = order.GetOrdersResp
	OrderInfo                = order.OrderInfo
	OrderProductInfo         = order.OrderProductInfo
	UpdateOrderByOrderNOReq  = order.UpdateOrderByOrderNOReq
	UpdateOrderByOrderNOResp = order.UpdateOrderByOrderNOResp
	UpdateOrderReq           = order.UpdateOrderReq
	UpdateOrderResp          = order.UpdateOrderResp

	Order interface {
		CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error)
		CreateOrderProduct(ctx context.Context, in *CreateOrderProductReq, opts ...grpc.CallOption) (*CreateOrderProductResp, error)
		UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
		UpdateOrderByOrderNO(ctx context.Context, in *UpdateOrderByOrderNOReq, opts ...grpc.CallOption) (*UpdateOrderByOrderNOResp, error)
		GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderResp, error)
		GetOrders(ctx context.Context, in *GetOrdersReq, opts ...grpc.CallOption) (*GetOrdersResp, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrder) CreateOrderProduct(ctx context.Context, in *CreateOrderProductReq, opts ...grpc.CallOption) (*CreateOrderProductResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderProduct(ctx, in, opts...)
}

func (m *defaultOrder) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateOrder(ctx, in, opts...)
}

func (m *defaultOrder) UpdateOrderByOrderNO(ctx context.Context, in *UpdateOrderByOrderNOReq, opts ...grpc.CallOption) (*UpdateOrderByOrderNOResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateOrderByOrderNO(ctx, in, opts...)
}

func (m *defaultOrder) GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

func (m *defaultOrder) GetOrders(ctx context.Context, in *GetOrdersReq, opts ...grpc.CallOption) (*GetOrdersResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetOrders(ctx, in, opts...)
}
